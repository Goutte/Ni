<?php

/**
 * BaseaPersonToACategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $person_id
 * @property integer $category_id
 * @property aPerson $Person
 * @property aCategory $Category
 * 
 * @method integer            getPersonId()    Returns the current record's "person_id" value
 * @method integer            getCategoryId()  Returns the current record's "category_id" value
 * @method aPerson            getPerson()      Returns the current record's "Person" value
 * @method aCategory          getCategory()    Returns the current record's "Category" value
 * @method aPersonToACategory setPersonId()    Sets the current record's "person_id" value
 * @method aPersonToACategory setCategoryId()  Sets the current record's "category_id" value
 * @method aPersonToACategory setPerson()      Sets the current record's "Person" value
 * @method aPersonToACategory setCategory()    Sets the current record's "Category" value
 * 
 * @package    asandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseaPersonToACategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('a_person_to_a_category');
        $this->hasColumn('person_id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('aPerson as Person', array(
             'local' => 'person_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('aCategory as Category', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}